key changes:

in Triton:
        self.add_parameter(name='pid_P',
                           label='PID P parameter',
                           get_cmd=partial(self._get_control_param, 'P'),
                           set_cmd=partial(self._set_control_param, 'P'))
        
        self.add_parameter(name='pid_I',
                           label='PID I parameter',
                           get_cmd=partial(self._get_control_param, 'I'),
                           set_cmd=partial(self._set_control_param, 'I'))
        
        self.add_parameter(name='pid_D',
                           label='PID D parameter',
                           get_cmd=partial(self._get_control_param, 'D'),
                           set_cmd=partial(self._set_control_param, 'D'))


        self.add_parameter(name='mc_heater_pwr',
                           label='Mixing chamber heater power',
                           unit='W',
                           get_cmd='READ:DEV:H1:HTR:SIG:POWR',
                           set_cmd='SET:DEV:H1:HTR:SIG:POWR:{}',
                           get_parser=self._parse_htr,
                           set_parser=float,
                           vals=Numbers(0, 300000))

        self.add_parameter(name='still_heater_pwr',
                           label='Still heater power',
                           unit='W',
                           get_cmd='READ:DEV:H2:HTR:SIG:POWR',
                           set_cmd='SET:DEV:H2:HTR:SIG:POWR:{}',
                           get_parser=self._parse_htr,
                           set_parser=float,
                           vals=Numbers(0, 300000))

    def set_B(self, x: float, y: float, z: float, s: float) -> None:
        if 0 < s <= 0.2:
            self.write('SET:SYS:VRM:COO:CART:RVST:MODE:RATE:RATE:' + str(s) +
                       ':VSET:[' + str(x) + ' ' + str(y) + ' ' + str(z) + ']\r\n')
            self.write('SET:SYS:VRM:ACTN:RTOS\r\n')
            t_wait = self.magnet_sweep_time() * 60 + 10
            print('Please wait ' + str(t_wait) + ' seconds for the field sweep...')
            while self.magnet_status() != 'IDLE':
                pass
        else:
            print('Warning: set magnet sweep rate in range (0 , 0.2] T/min')

    def _parse_htr(self, msg):
        if 'NOT_FOUND' in msg:
            return None
        return float(msg.split('SIG:POWR:')[-1].strip('uW'))/1e6


class Triton300(OxfordTriton):
    '''
    Triton 300 Driver.
    
    Automatically adjust heater range for Triton 300
    '''
    
    def __init__(self, name, address=None, port=None, terminator='\r\n',
                tmpfile=None, timeout=20, **kwargs):
    
        super().__init__(name, address=address, port=port,
                        terminator=terminator, timeout=timeout, **kwargs)
                    
        self.add_parameter(name='pid_setpoint_autorange',
                    label='PID temperature setpoint',
                    unit='K',
                    get_cmd=partial(self._get_control_param, 'TSET'),
                    set_cmd=self._set_pid_setpoint_autorange,
                    vals=Numbers(0,10)
        )

    def _set_pid_setpoint_autorange(self, temp):
        ''' Set the PID setpoint, automatically adjusting the heater range
        '''
        if(temp < 0.065):
            self._set_control_param('RANGE', 1)
        elif(temp < 0.15):
            self._set_control_param('RANGE', 3.16)
        elif(temp < 0.5):
            self._set_control_param('RANGE', 10)
        elif( temp <= 1.5):
            self._set_control_param('RANGE', 31.6)
        else :
            self._set_control_param('RANGE', 100.0 )

        self._set_control_param('TSET', temp)

Triton = OxfordTriton
"""Alias for backwards compatibility"""

